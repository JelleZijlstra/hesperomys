schema {
  query: QueryRoot
  mutation: MutationRoot
}

type ActiveRegion implements PersonTag {
  _Ignored: ID
  region: Region!
}

type Age implements TypeTag {
  _Ignored: ID
  age: SpecimenAge!
}

enum AgeClass {
  extant
  holocene
  fossil
  ichno
  removed
  track
  egg
  coprolite
  burrow
  bite_trace
  redirect
  recently_extinct
}

type Altitude implements TypeTag {
  _Ignored: ID
  altitude: String!
  unit: AltitudeUnit!
}

enum AltitudeUnit {
  m
  ft
}

type Article implements Node & Model {
  id: ID!
  oid: Int!
  callSign: String!
  pageTitle: String!
  redirectUrl: String
  modelCls: ModelCls!
  numericYear: Int
  addmonth: String!
  addday: String!
  addyear: String!
  name: String!
  authorTags: [AuthorTag!]!
  year: String
  title: String
  series: String
  volume: String
  issue: String
  startPage: String
  endPage: String
  url: String
  doi: String
  type: ArticleType!
  publisher: String
  Location: String!
  pages: String
  miscData: String!
  path: String
  ids: String
  bools: String
  kind: ArticleKind!
  tags: [ArticleTag!]!
  citationGroup: CitationGroup
  parent: Article
  articleSet(before: String, after: String, first: Int, last: Int): ArticleConnection
  numArticleSet: Int!
  comments(before: String, after: String, first: Int, last: Int): ArticleCommentConnection
  numComments: Int!
  locations(before: String, after: String, first: Int, last: Int): LocationConnection
  numLocations: Int!
  newNames(before: String, after: String, first: Int, last: Int): NameConnection
  numNewNames: Int!
  nameComments(before: String, after: String, first: Int, last: Int): NameCommentConnection
  numNameComments: Int!
  occurrences(before: String, after: String, first: Int, last: Int): OccurrenceConnection
  numOccurrences: Int!
  orderedNewNames(before: String, after: String, first: Int, last: Int): NameConnection
  numOrderedNewNames: Int!
  partiallySuppressedNames(before: String, after: String, first: Int, last: Int): NameConnection
  numPartiallySuppressedNames: Int!
  fullySuppressedNames(before: String, after: String, first: Int, last: Int): NameConnection
  numFullySuppressedNames: Int!
  conservedNames(before: String, after: String, first: Int, last: Int): NameConnection
  numConservedNames: Int!
  spellingSelections(before: String, after: String, first: Int, last: Int): NameConnection
  numSpellingSelections: Int!
  prioritySelections(before: String, after: String, first: Int, last: Int): NameConnection
  numPrioritySelections: Int!
  priorityReversals(before: String, after: String, first: Int, last: Int): NameConnection
  numPriorityReversals: Int!
  typeDesignations(before: String, after: String, first: Int, last: Int): NameConnection
  numTypeDesignations: Int!
  commissionTypeDesignations(before: String, after: String, first: Int, last: Int): NameConnection
  numCommissionTypeDesignations: Int!
  lectotypeDesignations(before: String, after: String, first: Int, last: Int): NameConnection
  numLectotypeDesignations: Int!
  neotypeDesignations(before: String, after: String, first: Int, last: Int): NameConnection
  numNeotypeDesignations: Int!
  specimenDetails(before: String, after: String, first: Int, last: Int): NameConnection
  numSpecimenDetails: Int!
  locationDetails(before: String, after: String, first: Int, last: Int): NameConnection
  numLocationDetails: Int!
  collectionDetails(before: String, after: String, first: Int, last: Int): NameConnection
  numCollectionDetails: Int!
  citationDetails(before: String, after: String, first: Int, last: Int): NameConnection
  numCitationDetails: Int!
  definitionDetails(before: String, after: String, first: Int, last: Int): NameConnection
  numDefinitionDetails: Int!
  etymologyDetails(before: String, after: String, first: Int, last: Int): NameConnection
  numEtymologyDetails: Int!
  typeSpeciesDetails(before: String, after: String, first: Int, last: Int): NameConnection
  numTypeSpeciesDetails: Int!
  biographies(before: String, after: String, first: Int, last: Int): PersonConnection
  numBiographies: Int!
}

type ArticleComment implements Node & Model {
  id: ID!
  oid: Int!
  callSign: String!
  pageTitle: String!
  redirectUrl: String
  modelCls: ModelCls!
  article: Article!
  kind: ArticleCommentKind!
  date: Int!
  text: String!
}

type ArticleCommentConnection {
  pageInfo: PageInfo!
  edges: [ArticleCommentEdge]!
}

type ArticleCommentEdge {
  node: ArticleComment
  cursor: String!
}

enum ArticleCommentKind {
  dating
  contents
  authorship
  location
  other
}

type ArticleConnection {
  pageInfo: PageInfo!
  edges: [ArticleEdge]!
}

type ArticleEdge {
  node: Article
  cursor: String!
}

type ArticleISSN implements ArticleTag {
  _Ignored: ID
  text: String!
}

enum ArticleKind {
  electronic
  physical
  no_copy
  part
  redirect
  removed
  reference
  alternative_version
}

interface ArticleTag {
  _Ignored: ID
}

enum ArticleType {
  ERROR
  CHAPTER
  BOOK
  THESIS
  WEB
  MISCELLANEOUS
  SUPPLEMENT
  JOURNAL
  REDIRECT
  PART
}

type AsEmendedBy implements NameTag {
  _Ignored: ID
  name: Name!
  comment: String
}

type Author implements AuthorTag {
  _Ignored: ID
  person: Person!
}

interface AuthorTag {
  _Ignored: ID
}

type BHLBibliography implements CitationGroupTag {
  _Ignored: ID
  text: String!
}

type BiblioNote implements CitationGroupTag {
  _Ignored: ID
  text: String!
}

type Biography implements PersonTag {
  _Ignored: ID
  article: Article!
}

type Book implements Node & Model {
  id: ID!
  oid: Int!
  callSign: String!
  pageTitle: String!
  redirectUrl: String
  modelCls: ModelCls!
  authorTags: [AuthorTag!]!
  year: String
  title: String!
  subtitle: String
  pages: String
  isbn: String
  publisher: String
  tags: [BookTag!]!
  citationGroup: CitationGroup
  dewey: String
  loc: String
  data: String
  category: String
}

type BookConnection {
  pageInfo: PageInfo!
  edges: [BookEdge]!
}

type BookEdge {
  node: Book
  cursor: String!
}

type BookEdition implements BookTag {
  _Ignored: ID
  text: String!
}

interface BookTag {
  _Ignored: ID
}

type ChildRule implements CollectionTag {
  _Ignored: ID
  collection: Collection!
  regex: String!
  taxon: Taxon
  age: AgeClass
}

type CitationDetail implements TypeTag {
  _Ignored: ID
  text: String!
  source: Article!
}

type CitationGroup implements Node & Model {
  id: ID!
  oid: Int!
  callSign: String!
  pageTitle: String!
  redirectUrl: String
  modelCls: ModelCls!
  name: String!
  region: Region
  deleted: Boolean!
  type: ArticleType!
  target: CitationGroup
  tags: [CitationGroupTag!]!
  archive: String
  redirects(before: String, after: String, first: Int, last: Int): CitationGroupConnection
  numRedirects: Int!
  patterns(before: String, after: String, first: Int, last: Int): CitationGroupPatternConnection
  numPatterns: Int!
  articleSet(before: String, after: String, first: Int, last: Int): ArticleConnection
  numArticleSet: Int!
  issuedateSet(before: String, after: String, first: Int, last: Int): IssueDateConnection
  numIssuedateSet: Int!
  names(before: String, after: String, first: Int, last: Int): NameConnection
  numNames: Int!
  bookSet(before: String, after: String, first: Int, last: Int): BookConnection
  numBookSet: Int!
  orderedNames(before: String, after: String, first: Int, last: Int): NameConnection
  numOrderedNames: Int!
  orderedArticles(before: String, after: String, first: Int, last: Int): ArticleConnection
  numOrderedArticles: Int!
}

type CitationGroupConnection {
  pageInfo: PageInfo!
  edges: [CitationGroupEdge]!
}

type CitationGroupEdge {
  node: CitationGroup
  cursor: String!
}

type CitationGroupPattern implements Node & Model {
  id: ID!
  oid: Int!
  callSign: String!
  pageTitle: String!
  redirectUrl: String
  modelCls: ModelCls!
  pattern: String!
  citationGroup: CitationGroup!
}

type CitationGroupPatternConnection {
  pageInfo: PageInfo!
  edges: [CitationGroupPatternEdge]!
}

type CitationGroupPatternEdge {
  node: CitationGroupPattern
  cursor: String!
}

interface CitationGroupTag {
  _Ignored: ID
}

type CitationGroupURL implements CitationGroupTag {
  _Ignored: ID
  text: String!
}

type CollectedBy implements TypeTag {
  _Ignored: ID
  person: Person!
}

type Collection implements Node & Model {
  id: ID!
  oid: Int!
  callSign: String!
  pageTitle: String!
  redirectUrl: String
  modelCls: ModelCls!
  label: String!
  name: String!
  location: Region!
  comment: String
  city: String
  removed: Boolean!
  tags: [CollectionTag!]!
  parent: Collection
  children(before: String, after: String, first: Int, last: Int): CollectionConnection
  numChildren: Int!
  typeSpecimens(before: String, after: String, first: Int, last: Int): NameConnection
  numTypeSpecimens: Int!
  associatedPeople(before: String, after: String, first: Int, last: Int): PersonConnection
  numAssociatedPeople: Int!
  probableSpecimens(before: String, after: String, first: Int, last: Int): NameConnection
  numProbableSpecimens: Int!
  sharedSpecimens(before: String, after: String, first: Int, last: Int): NameConnection
  numSharedSpecimens: Int!
  formerSpecimens(before: String, after: String, first: Int, last: Int): NameConnection
  numFormerSpecimens: Int!
  futureSpecimens(before: String, after: String, first: Int, last: Int): NameConnection
  numFutureSpecimens: Int!
  extraSpecimens(before: String, after: String, first: Int, last: Int): NameConnection
  numExtraSpecimens: Int!
}

type CollectionConnection {
  pageInfo: PageInfo!
  edges: [CollectionEdge]!
}

type CollectionDatabase implements CollectionTag {
  _Ignored: ID
  citation: Article!
  comment: String
}

type CollectionDetail implements TypeTag {
  _Ignored: ID
  text: String!
  source: Article!
}

type CollectionEdge {
  node: Collection
  cursor: String!
}

interface CollectionTag {
  _Ignored: ID
}

type CommentIssueDate implements IssueDateTag {
  _Ignored: ID
  text: String!
  source: Article!
}

enum CommentKind {
  taxonomy
  nomenclature
  type_locality
  type_specimen
  availability
  distribution
  etymology
  other
  structured_quote
  type_species
  homonymy
  spelling
  authorship
  automatic_change
  removal
  contents
  definition
  removed
}

type CommissionTypeDesignation implements TypeTag {
  _Ignored: ID
  opinion: Article!
  type: Name!
}

type ConditionalMustHaveSpecimenLinks implements CollectionTag {
  _Ignored: ID
  regex: String!
  taxon: Taxon
  age: AgeClass
}

type Conserved implements NameTag {
  _Ignored: ID
  opinion: Article!
  comment: String
}

type Coordinates implements TypeTag {
  _Ignored: ID
  latitude: String!
  longitude: String!
}

type Date implements TypeTag {
  _Ignored: ID
  date: String!
}

enum DateSource {
  internal
  external
  doi_published_print
  doi_published_online
  doi_published_other
  doi_published
  decision
}

type DatingTools implements CitationGroupTag {
  _Ignored: ID
  text: String!
}

type DefinitionDetail implements TypeTag {
  _Ignored: ID
  text: String!
  source: Article!
}

type DifferentAuthority implements TypeTag {
  _Ignored: ID
  comment: String
}

type ETMNA implements LocationTag {
  _Ignored: ID
  id: String!
}

type Edition implements ArticleTag {
  _Ignored: ID
  text: String!
}

enum EmendationJustification {
  inadvertent_error
  removal_of_mark
  incorrect_family_group_name
  prevailing_usage
  conserved_by_the_commission
}

type EnglishCommonName implements TaxonTag {
  _Ignored: ID
  name: String!
}

type EtymologyDetail implements TypeTag {
  _Ignored: ID
  text: String!
  source: Article!
}

type Eurobats implements ArticleTag {
  _Ignored: ID
  text: String!
}

type ExtraRepository implements TypeTag {
  _Ignored: ID
  repository: Collection!
}

enum FillDataLevel {
  needs_basic_data
  missing_required_fields
  missing_detail
  incomplete_detail
  incomplete_derived_tags
  no_data_from_original
  nothing_needed
}

type FindKind implements SpecimenTag {
  _Ignored: ID
  kind: KindOfFind!
}

type FormerRepository implements TypeTag {
  _Ignored: ID
  repository: Collection!
}

type FullIssue implements ArticleTag {
  _Ignored: ID
  comment: String
}

type FullySuppressedBy implements NameTag {
  _Ignored: ID
  opinion: Article!
  comment: String
}

type FutureRepository implements TypeTag {
  _Ignored: ID
  repository: Collection!
}

type Gender implements TypeTag {
  _Ignored: ID
  gender: SpecimenGender!
}

enum GenderArticle {
  art30_1_1
  art30_1_2
  art30_1_3
  art30_1_4_2
  art30_1_4_3
  art30_1_4_4
  art30_1_4_5
  art30_2_1
  art30_2_2
  art30_2_3
  art30_2_4
  bad_transliteration
  unknown_obvious_stem
  stem_expressly_set
  assumed
}

type General implements LocationTag {
  _Ignored: ID
}

type GenusCoelebs implements TypeTag {
  _Ignored: ID
  comments: String!
}

enum GrammaticalGender {
  masculine
  feminine
  neuter
}

enum Group {
  species
  genus
  family
  high
}

type HDL implements ArticleTag {
  _Ignored: ID
  text: String!
}

type HMW implements NameTag {
  _Ignored: ID
  number: String!
  name: String!
}

type Habitat implements TypeTag {
  _Ignored: ID
  text: String!
}

type Host implements TypeTag {
  _Ignored: ID
  name: String!
}

type ISBN implements ArticleTag {
  _Ignored: ID
  text: String!
}

type ISSN implements CitationGroupTag {
  _Ignored: ID
  text: String!
}

type ISSNOnline implements CitationGroupTag {
  _Ignored: ID
  text: String!
}

type IgnoreLint implements ArticleTag {
  _Ignored: ID
  label: String!
  comment: String
}

type IgnoreLintName implements TypeTag {
  _Ignored: ID
  label: String!
  comment: String
}

type IgnorePotentialCitations implements CitationGroupTag {
  _Ignored: ID
}

type ImpreciseLocality implements TypeTag {
  _Ignored: ID
  comment: String
}

type IncludedSpecies implements TypeTag {
  _Ignored: ID
  name: Name!
  comment: String
}

type IncorrectGrammar implements TypeTag {
  _Ignored: ID
  text: String!
}

type IncorrectOriginalSpellingOf implements NameTag {
  _Ignored: ID
  name: Name!
  comment: String
}

type IncorrectSubsequentSpellingOf implements NameTag {
  _Ignored: ID
  name: Name!
  comment: String
}

type InitialsOnly implements ArticleTag {
  _Ignored: ID
}

type Institution implements PersonTag {
  _Ignored: ID
  institution: Collection!
}

type Involved implements TypeTag {
  _Ignored: ID
  person: Person!
  comment: String
}

type IssueDate implements Node & Model {
  id: ID!
  oid: Int!
  callSign: String!
  pageTitle: String!
  redirectUrl: String
  modelCls: ModelCls!
  citationGroup: CitationGroup!
  series: String
  volume: String!
  issue: String
  startPage: String
  endPage: String
  date: String!
  tags: [IssueDateTag!]!
}

type IssueDateConnection {
  pageInfo: PageInfo!
  edges: [IssueDateEdge]!
}

type IssueDateEdge {
  node: IssueDate
  cursor: String!
}

interface IssueDateTag {
  _Ignored: ID
}

type IssueRegex implements CitationGroupTag {
  _Ignored: ID
  text: String!
}

type JSTOR implements ArticleTag {
  _Ignored: ID
  text: String!
}

type JustifiedEmendationOf implements NameTag {
  _Ignored: ID
  name: Name!
  justification: EmendationJustification!
  comment: String
}

type KeyReference implements TaxonTag {
  _Ignored: ID
  article: Article!
}

enum KindOfFind {
  bottle
  picked_up
  professional
}

type LSIDArticle implements ArticleTag {
  _Ignored: ID
  text: String!
  presentInArticle: PresenceStatus!
}

type LSIDName implements TypeTag {
  _Ignored: ID
  text: String!
}

type Language implements BookTag {
  _Ignored: ID
  language: SourceLanguage!
}

type LectotypeDesignation implements TypeTag {
  _Ignored: ID
  optionalSource: Article
  lectotype: String!
  valid: Boolean!
  comment: String
}

type Location implements Node & Model {
  id: ID!
  oid: Int!
  callSign: String!
  pageTitle: String!
  redirectUrl: String
  modelCls: ModelCls!
  name: String!
  minPeriod: Period
  maxPeriod: Period
  minAge: Int
  maxAge: Int
  stratigraphicUnit: StratigraphicUnit
  region: Region!
  comment: String!
  latitude: String!
  longitude: String!
  locationDetail: String!
  ageDetail: String!
  source: Article
  deleted: LocationStatus!
  tags: [LocationTag!]!
  parent: Location
  aliases(before: String, after: String, first: Int, last: Int): LocationConnection
  numAliases: Int!
  typeLocalities(before: String, after: String, first: Int, last: Int): NameConnection
  numTypeLocalities: Int!
  taxa(before: String, after: String, first: Int, last: Int): OccurrenceConnection
  numTaxa: Int!
}

type LocationConnection {
  pageInfo: PageInfo!
  edges: [LocationEdge]!
}

type LocationDetail implements TypeTag {
  _Ignored: ID
  text: String!
  source: Article!
}

type LocationEdge {
  node: Location
  cursor: String!
}

enum LocationStatus {
  valid
  deleted
  alias
}

interface LocationTag {
  _Ignored: ID
}

type MDD implements TaxonTag {
  _Ignored: ID
  id: String!
}

type MandatoryChangeOf implements NameTag {
  _Ignored: ID
  name: Name!
  comment: String
}

interface Model {
  oid: Int!
  callSign: String!
  pageTitle: String!
  redirectUrl: String
  modelCls: ModelCls!
}

type ModelCls {
  callSign: String!
  name: String!
  autocompletions(field: String): [String!]!
  newest(first: Int, after: String, before: String, last: Int): ModelConnection!
}

type ModelConnection {
  pageInfo: PageInfo!
  edges: [ModelEdge]!
}

type ModelEdge {
  node: Model
  cursor: String!
}

type MustHave implements CitationGroupTag {
  _Ignored: ID
}

type MustHaveAfter implements CitationGroupTag {
  _Ignored: ID
  year: String!
}

type MustHavePreciseDate implements CitationGroupTag {
  _Ignored: ID
}

type MustHaveSeries implements CitationGroupTag {
  _Ignored: ID
  comment: String
}

type MustHaveSpecimenLinks implements CollectionTag {
  _Ignored: ID
}

type MustHaveURL implements CitationGroupTag {
  _Ignored: ID
}

type MustUseChildren implements ArticleTag {
  _Ignored: ID
}

type MustUseChildrenCollection implements CollectionTag {
  _Ignored: ID
}

type MutationRoot {
  openArticle(articleId: Int!): OpenArticle
}

type NOW implements LocationTag {
  _Ignored: ID
  id: String!
}

type Name implements Node & Model {
  id: ID!
  oid: Int!
  callSign: String!
  pageTitle: String!
  redirectUrl: String
  modelCls: ModelCls!
  numericYear: Int
  group: Group!
  rootName: String!
  status: Status!
  taxon: Taxon!
  originalName: String
  correctedOriginalName: String
  nomenclatureStatus: NomenclatureStatus!
  target: Name
  authorTags: [AuthorTag!]!
  originalCitation: Article
  pageDescribed: String
  verbatimCitation: String
  citationGroup: CitationGroup
  year: String
  nameComplex: NameComplex
  speciesNameComplex: SpeciesNameComplex
  type: Name
  verbatimType: String
  typeLocality: Location
  typeSpecimen: String
  collection: Collection
  genusTypeKind: TypeSpeciesDesignation
  speciesTypeKind: SpeciesGroupType
  typeTags: [TypeTag!]!
  originalRank: Rank
  data: String
  Definition: String
  tags: [NameTag!]!
  redirects(before: String, after: String, first: Int, last: Int): NameConnection
  numRedirects: Int!
  typifiedNames(before: String, after: String, first: Int, last: Int): NameConnection
  numTypifiedNames: Int!
  taxonSet(before: String, after: String, first: Int, last: Int): TaxonConnection
  numTaxonSet: Int!
  comments(before: String, after: String, first: Int, last: Int): NameCommentConnection
  numComments: Int!
  fillDataLevel: FillDataLevel
  preoccupiedNames(before: String, after: String, first: Int, last: Int): NameConnection
  numPreoccupiedNames: Int!
  unjustifiedEmendations(before: String, after: String, first: Int, last: Int): NameConnection
  numUnjustifiedEmendations: Int!
  incorrectSubsequentSpellings(before: String, after: String, first: Int, last: Int): NameConnection
  numIncorrectSubsequentSpellings: Int!
  nominaNova(before: String, after: String, first: Int, last: Int): NameConnection
  numNominaNova: Int!
  variants(before: String, after: String, first: Int, last: Int): NameConnection
  numVariants: Int!
  takingPriority(before: String, after: String, first: Int, last: Int): NameConnection
  numTakingPriority: Int!
  nominaOblita(before: String, after: String, first: Int, last: Int): NameConnection
  numNominaOblita: Int!
  mandatoryChanges(before: String, after: String, first: Int, last: Int): NameConnection
  numMandatoryChanges: Int!
  incorrectOriginalSpellings(before: String, after: String, first: Int, last: Int): NameConnection
  numIncorrectOriginalSpellings: Int!
  subsequentUsages(before: String, after: String, first: Int, last: Int): NameConnection
  numSubsequentUsages: Int!
  nameCombinations(before: String, after: String, first: Int, last: Int): NameConnection
  numNameCombinations: Int!
  selectionsOfPriority(before: String, after: String, first: Int, last: Int): NameConnection
  numSelectionsOfPriority: Int!
  selectionsOfSpelling(before: String, after: String, first: Int, last: Int): NameConnection
  numSelectionsOfSpelling: Int!
  reversalsOfPriority(before: String, after: String, first: Int, last: Int): NameConnection
  numReversalsOfPriority: Int!
  justifiedEmendations(before: String, after: String, first: Int, last: Int): NameConnection
  numJustifiedEmendations: Int!
  designatedAsType(before: String, after: String, first: Int, last: Int): NameConnection
  numDesignatedAsType: Int!
  commissionDesignatedAsType(before: String, after: String, first: Int, last: Int): NameConnection
  numCommissionDesignatedAsType: Int!
}

type NameCombinationOf implements NameTag {
  _Ignored: ID
  name: Name!
  comment: String
}

type NameComment implements Node & Model {
  id: ID!
  oid: Int!
  callSign: String!
  pageTitle: String!
  redirectUrl: String
  modelCls: ModelCls!
  name: Name!
  kind: CommentKind!
  date: Int!
  text: String!
  source: Article
  page: String!
}

type NameCommentConnection {
  pageInfo: PageInfo!
  edges: [NameCommentEdge]!
}

type NameCommentEdge {
  node: NameComment
  cursor: String!
}

type NameComplex implements Node & Model {
  id: ID!
  oid: Int!
  callSign: String!
  pageTitle: String!
  redirectUrl: String
  modelCls: ModelCls!
  label: String!
  stem: String
  sourceLanguage: SourceLanguage!
  codeArticle: GenderArticle!
  gender: GrammaticalGender!
  comment: String
  stemRemove: String!
  stemAdd: String!
  endings(before: String, after: String, first: Int, last: Int): NameEndingConnection
  numEndings: Int!
  names(before: String, after: String, first: Int, last: Int): NameConnection
  numNames: Int!
}

type NameConnection {
  pageInfo: PageInfo!
  edges: [NameEdge]!
}

type NameEdge {
  node: Name
  cursor: String!
}

type NameEnding implements Node & Model {
  id: ID!
  oid: Int!
  callSign: String!
  pageTitle: String!
  redirectUrl: String
  modelCls: ModelCls!
  nameComplex: NameComplex!
  ending: String!
  comment: String!
}

type NameEndingConnection {
  pageInfo: PageInfo!
  edges: [NameEndingEdge]!
}

type NameEndingEdge {
  node: NameEnding
  cursor: String!
}

interface NameTag {
  _Ignored: ID
}

type NamedAfter implements TypeTag {
  _Ignored: ID
  person: Person!
}

enum NamingConvention {
  unspecified
  pinyin
  japanese
  dutch
  burmese
  spanish
  ancient
  organization
  hungarian
  vietnamese
  german
  general
  russian
  turkish
  chinese
  korean
  mongolian
  ukrainian
  other
  english
  english_peer
  french
  italian
  portuguese
}

type NeedsTranslation implements ArticleTag {
  _Ignored: ID
  language: SourceLanguage!
}

type NeotypeDesignation implements TypeTag {
  _Ignored: ID
  optionalSource: Article
  neotype: String!
  valid: Boolean!
  comment: String
}

type NoAge implements TypeTag {
  _Ignored: ID
}

type NoCollector implements TypeTag {
  _Ignored: ID
}

type NoDate implements TypeTag {
  _Ignored: ID
}

type NoEtymology implements TypeTag {
  _Ignored: ID
}

type NoGender implements TypeTag {
  _Ignored: ID
}

type NoLocation implements TypeTag {
  _Ignored: ID
}

type NoOrgan implements TypeTag {
  _Ignored: ID
}

type NoSpecimen implements TypeTag {
  _Ignored: ID
}

interface Node {
  id: ID!
}

type NomenNovumFor implements NameTag {
  _Ignored: ID
  name: Name!
  comment: String
}

type NomenOblitum implements NameTag {
  _Ignored: ID
  name: Name!
  comment: String
}

type NomenclatureDetail implements TypeTag {
  _Ignored: ID
  text: String!
  source: Article!
}

enum NomenclatureStatus {
  available
  nomen_nudum
  fully_suppressed
  not_based_on_a_generic_name
  infrasubspecific
  unpublished
  incorrect_subsequent_spelling
  unjustified_emendation
  before_1758
  hypothetical_concept
  teratological
  hybrid_as_such
  informal
  work_of_extant
  zoological_formula
  unlisted
  not_latin_alphabet
  inconsistently_binominal
  not_used_as_valid
  not_used_as_genus_plural
  based_on_a_suppressed_name
  not_published_with_a_generic_name
  multiple_words
  no_type_specified
  anonymous_authorship
  conditional
  variety_or_form
  not_explicitly_new
  mandatory_change
  ites_name
  hybrid_name
  art_13_nomen_oblitum
  variant
  justified_emendation
  preoccupied
  based_on_homonym
  partially_suppressed
  nomen_novum
  incorrect_original_spelling
  type_not_treated_as_valid
  reranking
  subsequent_usage
  not_intended_as_a_scientific_name
  collective_group
  not_nominative_singular
  as_emended
  rejected_by_fiat
  unpublished_thesis
  unpublished_electronic
  unpublished_pending
  unpublished_supplement
  name_combination
}

type NominalGenus implements TaxonTag {
  _Ignored: ID
  genus: Name!
}

type NonOriginal implements ArticleTag {
  _Ignored: ID
  comment: String
}

type Occurrence implements Node & Model {
  id: ID!
  oid: Int!
  callSign: String!
  pageTitle: String!
  redirectUrl: String
  modelCls: ModelCls!
  taxon: Taxon!
  location: Location!
  comment: String!
  status: OccurrenceStatus!
  source: Article
}

type OccurrenceConnection {
  pageInfo: PageInfo!
  edges: [OccurrenceEdge]!
}

type OccurrenceEdge {
  node: Occurrence
  cursor: String!
}

enum OccurrenceStatus {
  valid
  rejected
  occurrence_dubious
  introduced
  extirpated
  vagrant
  classification_dubious
}

type OnlineRepository implements CitationGroupTag {
  _Ignored: ID
  url: String!
  comment: String
}

type OpenArticle {
  ok: Boolean
}

type Organ implements TypeTag {
  _Ignored: ID
  organ: SpecimenOrgan!
  detail: String
  condition: String
}

type OriginalLanguage implements BookTag {
  _Ignored: ID
  language: SourceLanguage!
}

type PBDB implements LocationTag {
  _Ignored: ID
  id: String!
}

type PMC implements ArticleTag {
  _Ignored: ID
  text: String!
}

type PMID implements ArticleTag {
  _Ignored: ID
  text: String!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PageRegex implements CitationGroupTag {
  _Ignored: ID
  startPageRegex: String!
  pagesRegex: String!
  allowStandard: Boolean!
}

type PartialTaxon implements TypeTag {
  _Ignored: ID
  taxon: Taxon!
}

type PartiallySuppressedBy implements NameTag {
  _Ignored: ID
  opinion: Article!
  comment: String
}

type Period implements Node & Model {
  id: ID!
  oid: Int!
  callSign: String!
  pageTitle: String!
  redirectUrl: String
  modelCls: ModelCls!
  locations(before: String, after: String, first: Int, last: Int): LocationConnection
  numLocations: Int!
  name: String!
  parent: Period
  prev: Period
  next: Period
  minAge: Int
  maxAge: Int
  minPeriod: Period
  maxPeriod: Period
  system: PeriodSystem!
  rank: PeriodRank!
  comment: String!
  region: Region
  deleted: Boolean!
  children(before: String, after: String, first: Int, last: Int): PeriodConnection
  numChildren: Int!
  nextForeign(before: String, after: String, first: Int, last: Int): PeriodConnection
  numNextForeign: Int!
  prevForeign(before: String, after: String, first: Int, last: Int): PeriodConnection
  numPrevForeign: Int!
  childrenMin(before: String, after: String, first: Int, last: Int): PeriodConnection
  numChildrenMin: Int!
  childrenMax(before: String, after: String, first: Int, last: Int): PeriodConnection
  numChildrenMax: Int!
  stratigraphicUnitsMin(before: String, after: String, first: Int, last: Int): StratigraphicUnitConnection
  numStratigraphicUnitsMin: Int!
  stratigraphicUnitsMax(before: String, after: String, first: Int, last: Int): StratigraphicUnitConnection
  numStratigraphicUnitsMax: Int!
  locationsMin(before: String, after: String, first: Int, last: Int): LocationConnection
  numLocationsMin: Int!
  locationsMax(before: String, after: String, first: Int, last: Int): LocationConnection
  numLocationsMax: Int!
  hasLocations: Boolean
}

type PeriodConnection {
  pageInfo: PageInfo!
  edges: [PeriodEdge]!
}

type PeriodEdge {
  node: Period
  cursor: String!
}

enum PeriodRank {
  age
  epoch
  period
  era
  eon
  _bed
  _member
  _formation
  _group
  _supergroup
  other_chronostratigraphy
  subage
  biozone
  _subgroup
  zonation
}

enum PeriodSystem {
  gts
  nalma
  elma
  alma
  salma
  _lithostratigraphy
  aulma
  local_biostratigraphy
  aflma
}

type Person implements Node & Model {
  id: ID!
  oid: Int!
  callSign: String!
  pageTitle: String!
  redirectUrl: String
  modelCls: ModelCls!
  aliases(before: String, after: String, first: Int, last: Int): PersonConnection
  numAliases: Int!
  familyName: String!
  givenNames: String
  initials: String
  suffix: String
  tussenvoegsel: String
  birth: String
  death: String
  tags: [PersonTag!]!
  namingConvention: NamingConvention!
  type: PersonType!
  bio: String
  olId: String
  target: Person
  personSet(before: String, after: String, first: Int, last: Int): PersonConnection
  numPersonSet: Int!
  patronyms(before: String, after: String, first: Int, last: Int): NameConnection
  numPatronyms: Int!
  collected(before: String, after: String, first: Int, last: Int): NameConnection
  numCollected: Int!
  involved(before: String, after: String, first: Int, last: Int): NameConnection
  numInvolved: Int!
  articles(before: String, after: String, first: Int, last: Int): ArticleConnection
  numArticles: Int!
  books(before: String, after: String, first: Int, last: Int): BookConnection
  numBooks: Int!
  names(before: String, after: String, first: Int, last: Int): NameConnection
  numNames: Int!
  patronymsAll(before: String, after: String, first: Int, last: Int): NameConnection
  numPatronymsAll: Int!
  collectedAll(before: String, after: String, first: Int, last: Int): NameConnection
  numCollectedAll: Int!
  involvedAll(before: String, after: String, first: Int, last: Int): NameConnection
  numInvolvedAll: Int!
  articlesAll(before: String, after: String, first: Int, last: Int): ArticleConnection
  numArticlesAll: Int!
  booksAll(before: String, after: String, first: Int, last: Int): BookConnection
  numBooksAll: Int!
  namesAll(before: String, after: String, first: Int, last: Int): NameConnection
  numNamesAll: Int!
  orderedNames(before: String, after: String, first: Int, last: Int): NameConnection
  numOrderedNames: Int!
  orderedArticles(before: String, after: String, first: Int, last: Int): ArticleConnection
  numOrderedArticles: Int!
}

type PersonConnection {
  pageInfo: PageInfo!
  edges: [PersonEdge]!
}

type PersonEdge {
  node: Person
  cursor: String!
}

interface PersonTag {
  _Ignored: ID
}

enum PersonType {
  unchecked
  checked
  soft_redirect
  hard_redirect
  deleted
  alias
}

type Predecessor implements CitationGroupTag {
  _Ignored: ID
  cg: CitationGroup!
}

type PreoccupiedBy implements NameTag {
  _Ignored: ID
  name: Name!
  comment: String
}

enum PresenceStatus {
  absent
  to_be_determined
  probably_absent
  present
  inferred
}

type ProbableRepository implements TypeTag {
  _Ignored: ID
  repository: Collection!
  reasoning: String
}

type PublicationDate implements ArticleTag {
  _Ignored: ID
  source: DateSource!
  date: String!
  comment: String
}

type QueryRoot {
  node(id: ID!): Node
  byCallSign(callSign: String!, oid: String!): [Model]
  documentation(path: String!): String
  modelCls(callSign: String!): ModelCls!
  search(query: String!, before: String, after: String, first: Int, last: Int): SearchResultConnection
  regionByLabel(label: String): [Region]
  region(oid: Int): Region
  citationGroupByLabel(label: String): [CitationGroup]
  citationGroup(oid: Int): CitationGroup
  citationGroupPatternByLabel(label: String): [CitationGroupPattern]
  citationGroupPattern(oid: Int): CitationGroupPattern
  personByLabel(label: String): [Person]
  person(oid: Int): Person
  articleByLabel(label: String): [Article]
  article(oid: Int): Article
  articleComment(oid: Int): ArticleComment
  issueDateByLabel(label: String): [IssueDate]
  issueDate(oid: Int): IssueDate
  taxonByLabel(label: String): [Taxon]
  taxon(oid: Int): Taxon
  collectionByLabel(label: String): [Collection]
  collection(oid: Int): Collection
  periodByLabel(label: String): [Period]
  period(oid: Int): Period
  stratigraphicUnitByLabel(label: String): [StratigraphicUnit]
  stratigraphicUnit(oid: Int): StratigraphicUnit
  locationByLabel(label: String): [Location]
  location(oid: Int): Location
  speciesNameComplexByLabel(label: String): [SpeciesNameComplex]
  speciesNameComplex(oid: Int): SpeciesNameComplex
  nameComplexByLabel(label: String): [NameComplex]
  nameComplex(oid: Int): NameComplex
  nameEndingByLabel(label: String): [NameEnding]
  nameEnding(oid: Int): NameEnding
  speciesNameEndingByLabel(label: String): [SpeciesNameEnding]
  speciesNameEnding(oid: Int): SpeciesNameEnding
  nameByLabel(label: String): [Name]
  name(oid: Int): Name
  nameComment(oid: Int): NameComment
  occurrence(oid: Int): Occurrence
  bookByLabel(label: String): [Book]
  book(oid: Int): Book
  specimenByLabel(label: String): [Specimen]
  specimen(oid: Int): Specimen
  specimenComment(oid: Int): SpecimenComment
}

enum Rank {
  subspecies
  species
  species_group
  subgenus
  genus
  division
  infratribe
  subtribe
  tribe
  infrafamily
  subfamily
  family
  superfamily
  hyperfamily
  parvorder
  infraorder
  suborder
  order
  superorder
  subcohort
  cohort
  supercohort
  infraclass
  subclass
  class_
  superclass
  infraphylum
  subphylum
  phylum
  superphylum
  infrakingdom
  subkingdom
  kingdom
  superkingdom
  domain
  root
  unranked
  informal
  other
  variety
  form
  infrasubspecific
  synonym
}

type Region implements Node & Model {
  id: ID!
  oid: Int!
  callSign: String!
  pageTitle: String!
  redirectUrl: String
  modelCls: ModelCls!
  name: String!
  comment: String
  parent: Region
  kind: RegionKind!
  children(before: String, after: String, first: Int, last: Int): RegionConnection
  numChildren: Int!
  citationGroups(before: String, after: String, first: Int, last: Int): CitationGroupConnection
  numCitationGroups: Int!
  collections(before: String, after: String, first: Int, last: Int): CollectionConnection
  numCollections: Int!
  periods(before: String, after: String, first: Int, last: Int): StratigraphicUnitConnection
  numPeriods: Int!
  locations(before: String, after: String, first: Int, last: Int): LocationConnection
  numLocations: Int!
  specimenSet(before: String, after: String, first: Int, last: Int): SpecimenConnection
  numSpecimenSet: Int!
  hasCollections: Boolean
  hasCitationGroups: Boolean
  hasLocations: Boolean
  hasPeriods: Boolean
  hasTypeLocalities: Boolean
  hasAssociatedPeople: Boolean
  associatedPeople(before: String, after: String, first: Int, last: Int): PersonConnection
  numAssociatedPeople: Int!
}

type RegionConnection {
  pageInfo: PageInfo!
  edges: [RegionEdge]!
}

type RegionEdge {
  node: Region
  cursor: String!
}

enum RegionKind {
  continent
  country
  subnational
  planet
  other
  county
  island
  state
  province
  department
  region
  canton
  prefecture
  territory
  supranational
}

type Rejected implements NameTag {
  _Ignored: ID
  opinion: Article!
  comment: String
}

type RejectedLSIDName implements TypeTag {
  _Ignored: ID
  text: String!
}

type Repository implements TypeTag {
  _Ignored: ID
  repository: Collection!
}

type ReversalOfPriority implements NameTag {
  _Ignored: ID
  over: Name!
  opinion: Article!
  comment: String
}

type SearchResult {
  model: Model
  context: String
  highlight: String
}

type SearchResultConnection {
  pageInfo: PageInfo!
  edges: [SearchResultEdge]!
}

type SearchResultEdge {
  node: SearchResult
  cursor: String!
}

type SelectionOfPriority implements NameTag {
  _Ignored: ID
  over: Name!
  optionalSource: Article
  comment: String
}

type SelectionOfSpelling implements NameTag {
  _Ignored: ID
  optionalSource: Article
  comment: String
}

type SeriesRegex implements CitationGroupTag {
  _Ignored: ID
  text: String!
}

enum SourceLanguage {
  latin
  greek
  other
  english
  french
  german
  spanish
  portuguese
  russian
  arabic
  chinese
  mongolian
  japanese
  thai
  korean
  hungarian
  vietnamese
  italian
  dutch
  papiamento
  catalan
  modern_greek
  hebrew
  aramaic
  sanskrit
  hindi
  old_english
  bulgarian
  albanian
  frisian
  norwegian
  danish
  swedish
  finnish
}

enum SpeciesGroupType {
  holotype
  lectotype
  neotype
  syntypes
  nonexistent
}

type SpeciesNameComplex implements Node & Model {
  id: ID!
  oid: Int!
  callSign: String!
  pageTitle: String!
  redirectUrl: String
  modelCls: ModelCls!
  label: String!
  stem: String
  kind: SpeciesNameKind!
  masculineEnding: String!
  feminineEnding: String!
  neuterEnding: String!
  comment: String
  endings(before: String, after: String, first: Int, last: Int): SpeciesNameEndingConnection
  numEndings: Int!
  names(before: String, after: String, first: Int, last: Int): NameConnection
  numNames: Int!
}

type SpeciesNameEnding implements Node & Model {
  id: ID!
  oid: Int!
  callSign: String!
  pageTitle: String!
  redirectUrl: String
  modelCls: ModelCls!
  nameComplex: SpeciesNameComplex!
  ending: String!
  comment: String!
  fullNameOnly: Boolean!
}

type SpeciesNameEndingConnection {
  pageInfo: PageInfo!
  edges: [SpeciesNameEndingEdge]!
}

type SpeciesNameEndingEdge {
  node: SpeciesNameEnding
  cursor: String!
}

enum SpeciesNameKind {
  adjective
  noun_in_apposition
  genitive
  genitive_adjective
  non_latin
  ambiguous_noun
  patronym_masculine
  patronym_feminine
  patronym_masculine_plural
  patronym_feminine_plural
  patronym_latin
  unknown
}

type Specimen implements Node & Model {
  id: ID!
  oid: Int!
  callSign: String!
  pageTitle: String!
  redirectUrl: String
  modelCls: ModelCls!
  taxon: Taxon!
  region: Region!
  taxonText: String!
  locationText: String!
  date: String!
  description: String!
  link: String!
  tags: [SpecimenTag!]!
  comments(before: String, after: String, first: Int, last: Int): SpecimenCommentConnection
  numComments: Int!
}

enum SpecimenAge {
  embryo
  juvenile
  subadult
  adult
  larva
}

type SpecimenComment implements Node & Model {
  id: ID!
  oid: Int!
  callSign: String!
  pageTitle: String!
  redirectUrl: String
  modelCls: ModelCls!
  specimen: Specimen!
  date: Int!
  text: String!
}

type SpecimenCommentConnection {
  pageInfo: PageInfo!
  edges: [SpecimenCommentEdge]!
}

type SpecimenCommentEdge {
  node: SpecimenComment
  cursor: String!
}

type SpecimenConnection {
  pageInfo: PageInfo!
  edges: [SpecimenEdge]!
}

type SpecimenDetail implements TypeTag {
  _Ignored: ID
  text: String!
  source: Article!
}

type SpecimenEdge {
  node: Specimen
  cursor: String!
}

enum SpecimenGender {
  male
  female
  hermaphrodite
  unknown
}

type SpecimenLinkPrefix implements CollectionTag {
  _Ignored: ID
  prefix: String!
}

enum SpecimenOrgan {
  skin
  skull
  postcranial_skeleton
  mandible
  tooth
  in_alcohol
  other
  maxilla
  antler
  humerus
  femur
  ulna
  radius
  tibia
  fibula
  vertebra
  pelvis
  dentary
  caudal_tube
  osteoderm
  coracoid
  whole_animal
  egg
  horn_core
  frontlet
  petrosal
  tarsometatarsus
  scapula
  carpal
  hyoid
  rib
  manus
  pes
  astragalus
  calcaneum
  clavicle
  navicular
  sternum
  baculum
  tissue_sample
  shell
  skeleton
  limb
  girdle
  scapulocoracoid
  carpometacarpal
  patella
}

type SpecimenRegex implements CollectionTag {
  _Ignored: ID
  regex: String!
}

interface SpecimenTag {
  _Ignored: ID
}

enum Status {
  valid
  synonym
  dubious
  nomen_dubium
  species_inquirenda
  spurious
  removed
  redirect
  composite
  hybrid
}

type StratigraphicUnit implements Node & Model {
  id: ID!
  oid: Int!
  callSign: String!
  pageTitle: String!
  redirectUrl: String
  modelCls: ModelCls!
  name: String!
  parent: StratigraphicUnit
  prev: StratigraphicUnit
  minPeriod: Period
  maxPeriod: Period
  rank: StratigraphicUnitRank!
  comment: String!
  region: Region
  deleted: Boolean!
  children(before: String, after: String, first: Int, last: Int): StratigraphicUnitConnection
  numChildren: Int!
  next(before: String, after: String, first: Int, last: Int): StratigraphicUnitConnection
  numNext: Int!
  locations(before: String, after: String, first: Int, last: Int): LocationConnection
  numLocations: Int!
  hasLocations: Boolean
}

type StratigraphicUnitConnection {
  pageInfo: PageInfo!
  edges: [StratigraphicUnitEdge]!
}

type StratigraphicUnitEdge {
  node: StratigraphicUnit
  cursor: String!
}

enum StratigraphicUnitRank {
  bed
  member
  formation
  group
  supergroup
  other_lithostratigraphy
  subgroup
}

type StratigraphyDetail implements TypeTag {
  _Ignored: ID
  text: String!
}

type SubsequentUsageOf implements NameTag {
  _Ignored: ID
  name: Name!
  comment: String
}

type TakesPriorityOf implements NameTag {
  _Ignored: ID
  name: Name!
  comment: String
}

type Taxon implements Node & Model {
  id: ID!
  oid: Int!
  callSign: String!
  pageTitle: String!
  redirectUrl: String
  modelCls: ModelCls!
  rank: Rank!
  validName: String!
  age: AgeClass!
  parent: Taxon
  data: String
  comments: String
  isPageRoot: Boolean!
  tags: [TaxonTag!]!
  baseName: Name!
  children(before: String, after: String, first: Int, last: Int): TaxonConnection
  numChildren: Int!
  names(before: String, after: String, first: Int, last: Int): NameConnection
  numNames: Int!
  occurrences(before: String, after: String, first: Int, last: Int): OccurrenceConnection
  numOccurrences: Int!
  specimenSet(before: String, after: String, first: Int, last: Int): SpecimenConnection
  numSpecimenSet: Int!
  class_: Taxon
  order: Taxon
  family: Taxon
}

type TaxonConnection {
  pageInfo: PageInfo!
  edges: [TaxonEdge]!
}

type TaxonCount implements SpecimenTag {
  _Ignored: ID
  count: Int!
  taxon: String!
}

type TaxonEdge {
  node: Taxon
  cursor: String!
}

interface TaxonTag {
  _Ignored: ID
}

type TextualOriginalRank implements TypeTag {
  _Ignored: ID
  text: String!
}

type TransliteratedFamilyName implements PersonTag {
  _Ignored: ID
  text: String!
}

type TypeCatalog implements CollectionTag {
  _Ignored: ID
  citation: Article!
  coverage: String!
}

type TypeDesignation implements TypeTag {
  _Ignored: ID
  source: Article!
  type: Name!
  comment: String
}

type TypeLocality implements TypeTag {
  _Ignored: ID
  text: String!
}

enum TypeSpeciesDesignation {
  original_designation
  monotypy
  absolute_tautonymy
  linnaean_tautonymy
  subsequent_monotypy
  subsequent_designation
  implicit
  misidentification
  designated_by_the_commission
  undesignated
}

type TypeSpeciesDetail implements TypeTag {
  _Ignored: ID
  text: String!
  source: Article!
}

type TypeSpecimenLink implements TypeTag {
  _Ignored: ID
  url: String!
}

interface TypeTag {
  _Ignored: ID
}

type UnavailableElectronic implements ArticleTag {
  _Ignored: ID
  comment: String
}

type UnjustifiedEmendationOf implements NameTag {
  _Ignored: ID
  name: Name!
  comment: String
}

type VariantOf implements NameTag {
  _Ignored: ID
  name: Name!
  comment: String
}

type VolumeRegex implements CitationGroupTag {
  _Ignored: ID
  text: String!
}

type Wiki implements PersonTag {
  _Ignored: ID
  text: String!
}

type YearRange implements CitationGroupTag {
  _Ignored: ID
  start: String!
  end: String!
}

type _RawCollector implements TypeTag {
  _Ignored: ID
  text: String!
}
